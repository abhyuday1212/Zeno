// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// enum DocumentStatus {
//   PENDING
//   COMPLETED
// }

// enum ApplicationStatus {
//   PENDING
//   APPROVED
//   REJECTED
// }

// This model stores details for external authentication accounts (for example, OAuth providers like Google, Facebook, etc.).
// 1. External authentication account for (currently) students.

// one-to-one relation between User and Profile
// A user can have one profile
// model User1 {
//   id      String    @id @default(uuid())
//   email   String    @unique
//   profile Profile1?
//   Post2   Post2?
// }

// A profile can have one user
// model Profile1 {
//   name   String?
//   gender String
//   age    String

//   userId String @unique
//   user   User1  @relation(fields: [userId], references: [id])
// }

//-----------
// One to Many

// User 2 can have many posts
// model User2 {
//   id    String  @id @default(uuid())
//   email String  @unique
//   posts Post2[]
// }

//Every Post can be related to the same user
// model Post2 {
//   title String?

//   userId  String  @unique
//   user    User1   @relation(fields: [userId], references: [id])
//   User2   User2?  @relation(fields: [user2Id], references: [id])
//   user2Id String?
// }

//------------------Many to Many
// Many different users can have many different posts
// model Post3 {
//   id String?

//   title String?
//   tags  Tag3[]
// }

// Many different can have many differet posts
// model Tag3 {
//   id   String?
//   name String?

//   posts Post3[]
// }

// -------------------------------

model Account {
  id                String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @db.Uuid

  @@unique([provider, providerAccountId])
  @@map("Account")
}

model Session {
  id           String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  expires      DateTime
  sessionToken String   @unique
  accessToken  String   @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id])
  userId       String   @db.Uuid
}

model User {
  id              String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name            String?
  email           String    @unique
  isEmailVerified Boolean   @default(false)
  emailVerified   DateTime?
  password        String?
  image           String?
  userType        String    @default("user")

  accounts Account[]
  sessions Session[]

  createdAt   DateTime @default(now())
  lastUpdated DateTime @updatedAt

  @@map("User")
}

enum UserType {
  Admin
  user
}
