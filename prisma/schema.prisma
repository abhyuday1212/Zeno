// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// enum DocumentStatus {
//   PENDING
//   COMPLETED
// }

// enum ApplicationStatus {
//   PENDING
//   APPROVED
//   REJECTED
// }

// This model stores details for external authentication accounts (for example, OAuth providers like Google, Facebook, etc.).
// 1. External authentication account for (currently) students.

// one-to-one relation between User and Profile
// A user can have one profile
// model User1 {
//   id      String    @id @default(uuid())
//   email   String    @unique
//   profile Profile1?
//   Post2   Post2?
// }

// A profile can have one user
// model Profile1 {
//   name   String?
//   gender String
//   age    String

//   userId String @unique
//   user   User1  @relation(fields: [userId], references: [id])
// }

//-----------
// One to Many

// one user can have many posts.

/**
 * Explanation:
 * In User, the posts field establishes a one-to-many relationship: one user can have many posts.
 * In Post, the userId is a foreign key pointing to the User's id.
 * The @relation(...) decorator connects the Post to the User via userId.
 * No @unique on userId, so multiple posts can share the same userId.
 * // -------- xxxxxxxxx ---------
 * User
 * -----
 * id    (PK)
 * email
 * posts → [Post, Post, Post, ...]
 * Post
 * -----
 * id     (PK)
 * title
 * userId (FK) → User.id
 */
// model User2 {
//   id    String @id @default(uuid())
//   email String @unique
//   posts Post[]
// }

// model Post {
//   id     String  @id @default(uuid())
//   title  String?
//   userId String
//   user   User2   @relation(fields: [userId], references: [id])
// }

//------------------Many to Many
// Many different users can have many different posts
/**
 * Explanation:
 * What This Models:
 * A Post can have many Tags (e.g., #fun, #news, #AI)
 * A Tag can be used in many Posts
 * This creates a many-to-many relationship.
 * // ---------- xxxxx ----------
 * How It Works:
 * Prisma automatically creates a join table behind the scenes (e.g., PostToTag) to manage this relationship.
 * The @relation("PostTags") just names the relationship to make both sides reference the same one (optional but good for clarity).
 */

/**
 * Is it important to save array of posts in the tag table ?
 * // Ans: No, it's not strictly necessary, but yes, it is recommended for a bidirectional relationship
 * You're declaring a bidirectional many-to-many relation:
 * Post.tags gives you all tags for a post
 * Tag.posts gives you all posts that have this tag
 * ✅ Even if you don’t often query from Tag to Post, you should keep both sides if:
 * You want Prisma to auto-generate the join table (PostTags)
 * You want type safety and ease of querying in both directions
 * // ------- xxxxxxxx --------
 * // Alternate
 * If you really only want to query from Post to Tag and avoid the reverse (Tag to Post), you could use a custom join table, like this:
 * // -----
 * model Post {
 * id        String     @id @default(uuid())
 * title     String?
 * postTags  PostTag[]
 * }
 * model Tag {
 * id        String     @id @default(uuid())
 * name      String?
 * postTags  PostTag[]
 * }
 * model PostTag {
 * post   Post  @relation(fields: [postId], references: [id])
 * postId String
 * tag    Tag   @relation(fields: [tagId], references: [id])
 * tagId String
 * @@id([postId, tagId])
 * }
 */

// model Post {
//   id    String  @id @default(uuid())
//   title String?

//   tags Tag[] @relation("PostTags")
// }

// model Tag {
//   id   String  @id @default(uuid())
//   name String?

//   posts Post[] @relation("PostTags")
// }

// -------------------------------
model Account {
  id                String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @db.Uuid

  @@unique([provider, providerAccountId])
  @@map("Account")
}

model Session {
  id           String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  expires      DateTime
  sessionToken String   @unique
  accessToken  String   @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id])
  userId       String   @db.Uuid
}

model FriendRequest {
  id     String              @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  status FriendRequestStatus @default(PENDING)

  // The user who sent the request
  senderId String @db.Uuid
  sender   User   @relation("SentFriendRequests", fields: [senderId], references: [id], onDelete: Cascade)

  // The user who received the request
  receiverId String @db.Uuid
  receiver   User   @relation("ReceivedFriendRequests", fields: [receiverId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Prevent duplicate friend requests between same users
  @@unique([senderId, receiverId])
  // @@map("FriendRequest")
}

model Friendship {
  id String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid

  user1Id String @db.Uuid
  user1   User   @relation("User1Friendships", fields: [user1Id], references: [id], onDelete: Cascade)

  user2Id String @db.Uuid
  user2   User   @relation("User2Friendships", fields: [user2Id], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())

  // Ensure friendship uniqueness (regardless of order)
  @@unique([user1Id, user2Id])
  // @@map("Friendship")
}

enum FriendRequestStatus {
  PENDING
  ACCEPTED
  REJECTED
  CANCELLED
}

model User {
  id              String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name            String?
  email           String    @unique
  isEmailVerified Boolean   @default(false)
  emailVerified   DateTime?
  password        String?
  image           String?
  userType        String    @default("user")

  accounts Account[]
  sessions Session[]

  // Friend request relations
  sentFriendRequests     FriendRequest[] @relation("SentFriendRequests")
  receivedFriendRequests FriendRequest[] @relation("ReceivedFriendRequests")

  // Friendship relations
  user1Friendships Friendship[] @relation("User1Friendships")
  user2Friendships Friendship[] @relation("User2Friendships")

  createdAt   DateTime @default(now())
  lastUpdated DateTime @updatedAt

  // @@map("User")
}
